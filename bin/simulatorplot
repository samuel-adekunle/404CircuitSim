#!/usr/bin/env python3

import plotly.io as pio
import plotly.express as px
import pandas as pd
import argparse
import plotly.graph_objs as go
import os
from plotly.subplots import make_subplots
from halo import Halo
parser = argparse.ArgumentParser(description="Add Options to Control Plot")
parser.add_argument("file_name", metavar="FILE", type=str, nargs=1,
                    help="Path of file to plot")
parser.add_argument("-c", "--column-names",
                    action='store_true', help="show column names")
parser.add_argument("-s", "--save", type=str, nargs=1, help="save plotly html output")
parser.add_argument("-m", "--mode", type=str, nargs=1,
                    help="Either space or csv formatted documents can be plotted, default is csv")
parser.add_argument("include", metavar="COLUMN_NAME", type=str, nargs='*',
                    help="Space separated list of columns to plot, if omitted all columns will be plotted", default=None)


if __name__ == '__main__':
    args = parser.parse_args()
    sep = ',' if args.mode is None or args.mode[0].lower() == 'csv' else '\t'

    file_name = args.file_name[0]
    plots = dict()
    stepVars = None
    with Halo(text='Loading file', spinner='dots'):
        with open(file_name, mode='r') as f:
            heading = f.readline().rstrip().split(sep)
            if args.column_names:
                print(heading)
                exit(0)

            column_names = list(filter(lambda x : x != 'V(0)',heading)) if not args.include else ["Time", *args.include[0].split(' ')]


            df = pd.DataFrame(columns=heading)
            i = 0
            while True:
                line = f.readline().rstrip()
                if len(line) == 0:
                    plots[stepVars] = df
                    break
                if line[0] == 'S':
                    if stepVars is None:
                        stepVars = line.split(' ')
                        stepVars = ' '.join(stepVars[2:-2])
                        continue

                    plots[stepVars] = df[column_names]
                    df = pd.DataFrame(columns=heading)
                    i = 0

                    stepVars = line.split(' ')
                    stepVars = ' '.join(stepVars[2:-2])
                    continue

                df.loc[i] = line.split(sep)
                i += 1
    with Halo(text='Generating plot', spinner='dots'):
        fig = make_subplots(specs=[[{"secondary_y": True}]])

        if stepVars is not None:
            for key, df in plots.items():
                for col in column_names[1:]:
                    fig.add_trace(
                        go.Scatter(x=df["Time"], y=df[col], name=f"{col} - {key}"),
                        secondary_y=col[0] == 'I'
                    )
        else:
            df = df[column_names]
            for col in column_names[1:]:
                fig.add_trace(
                    go.Scatter(x=df["Time"], y=df[col], name=col),
                    secondary_y=col[0] == 'I'
                )

    x_linear = dict(label="X Linear", method="relayout",
                    args=[{"xaxis.type": "linear"}])
    y_linear = dict(label="Y Linear", method="relayout",
                    args=[{"yaxis.type": "linear"}])
    x_log = dict(label="X Log", method="relayout",
                 args=[{"xaxis.type": "log"}])
    y_log = dict(label="Y Log", method="relayout",
                 args=[{"yaxis.type": "log"}])
    buttons = list([x_linear, y_linear, x_log, y_log])

    fig.update_layout(title_text="Scale", updatemenus=[dict(buttons=buttons)])
    fig.update_layout(showlegend=True)
    fig.update_xaxes(title_text="<b>Time/s</b>")
    fig.update_yaxes(title_text="<b>Voltage/V</b>", secondary_y=False)
    fig.update_yaxes(title_text="<b>Current/A</b>", secondary_y=True)

    if args.save:
        fig.write_html(args.save[0])

    fig.show()
